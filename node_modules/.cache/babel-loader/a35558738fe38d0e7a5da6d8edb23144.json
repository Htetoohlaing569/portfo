{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rectBounce = exports.circleBounce = exports.circleBounceDataFromParticle = exports.divMode = exports.singleDivModeExecute = exports.divModeExecute = exports.isDivModeEnabled = exports.deepExtend = exports.calculateBounds = exports.areBoundsInside = exports.isPointInside = exports.itemFromArray = exports.arrayRandomIndex = exports.loadFont = exports.isInArray = exports.cancelAnimation = exports.animate = exports.isSsr = void 0;\n\nconst NumberUtils_1 = require(\"./NumberUtils\");\n\nconst Core_1 = require(\"../Core\");\n\nfunction rectSideBounce(pSide, pOtherSide, rectSide, rectOtherSide, velocity, factor) {\n  const res = {\n    bounced: false\n  };\n\n  if (pOtherSide.min >= rectOtherSide.min && pOtherSide.min <= rectOtherSide.max && pOtherSide.max >= rectOtherSide.min && pOtherSide.max <= rectOtherSide.max) {\n    if (pSide.max >= rectSide.min && pSide.max <= (rectSide.max + rectSide.min) / 2 && velocity > 0 || pSide.min <= rectSide.max && pSide.min > (rectSide.max + rectSide.min) / 2 && velocity < 0) {\n      res.velocity = velocity * -factor;\n      res.bounced = true;\n    }\n  }\n\n  return res;\n}\n\nfunction checkSelector(element, selectors) {\n  if (selectors instanceof Array) {\n    for (const selector of selectors) {\n      if (element.matches(selector)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return element.matches(selectors);\n  }\n}\n\nfunction isSsr() {\n  return typeof window === \"undefined\" || !window || typeof window.document === \"undefined\" || !window.document;\n}\n\nexports.isSsr = isSsr;\n\nfunction animate() {\n  return isSsr() ? callback => setTimeout(callback) : callback => (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || window.setTimeout)(callback);\n}\n\nexports.animate = animate;\n\nfunction cancelAnimation() {\n  return isSsr() ? handle => clearTimeout(handle) : handle => (window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.clearTimeout)(handle);\n}\n\nexports.cancelAnimation = cancelAnimation;\n\nfunction isInArray(value, array) {\n  return value === array || array instanceof Array && array.indexOf(value) > -1;\n}\n\nexports.isInArray = isInArray;\n\nasync function loadFont(character) {\n  var _a, _b;\n\n  try {\n    await document.fonts.load(`${(_a = character.weight) !== null && _a !== void 0 ? _a : \"400\"} 36px '${(_b = character.font) !== null && _b !== void 0 ? _b : \"Verdana\"}'`);\n  } catch (_c) {}\n}\n\nexports.loadFont = loadFont;\n\nfunction arrayRandomIndex(array) {\n  return Math.floor(Math.random() * array.length);\n}\n\nexports.arrayRandomIndex = arrayRandomIndex;\n\nfunction itemFromArray(array, index) {\n  let useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const fixedIndex = index !== undefined && useIndex ? index % array.length : arrayRandomIndex(array);\n  return array[fixedIndex];\n}\n\nexports.itemFromArray = itemFromArray;\n\nfunction isPointInside(point, size, radius, direction) {\n  return areBoundsInside(calculateBounds(point, radius !== null && radius !== void 0 ? radius : 0), size, direction);\n}\n\nexports.isPointInside = isPointInside;\n\nfunction areBoundsInside(bounds, size, direction) {\n  let inside = true;\n\n  if (!direction || direction === \"bottom\") {\n    inside = bounds.top < size.height;\n  }\n\n  if (inside && (!direction || direction === \"left\")) {\n    inside = bounds.right > 0;\n  }\n\n  if (inside && (!direction || direction === \"right\")) {\n    inside = bounds.left < size.width;\n  }\n\n  if (inside && (!direction || direction === \"top\")) {\n    inside = bounds.bottom > 0;\n  }\n\n  return inside;\n}\n\nexports.areBoundsInside = areBoundsInside;\n\nfunction calculateBounds(point, radius) {\n  return {\n    bottom: point.y + radius,\n    left: point.x - radius,\n    right: point.x + radius,\n    top: point.y - radius\n  };\n}\n\nexports.calculateBounds = calculateBounds;\n\nfunction deepExtend(destination) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  for (const source of sources) {\n    if (source === undefined || source === null) {\n      continue;\n    }\n\n    if (typeof source !== \"object\") {\n      destination = source;\n      continue;\n    }\n\n    const sourceIsArray = Array.isArray(source);\n\n    if (sourceIsArray && (typeof destination !== \"object\" || !destination || !Array.isArray(destination))) {\n      destination = [];\n    } else if (!sourceIsArray && (typeof destination !== \"object\" || !destination || Array.isArray(destination))) {\n      destination = {};\n    }\n\n    for (const key in source) {\n      if (key === \"__proto__\") {\n        continue;\n      }\n\n      const sourceDict = source;\n      const value = sourceDict[key];\n      const isObject = typeof value === \"object\";\n      const destDict = destination;\n      destDict[key] = isObject && Array.isArray(value) ? value.map(v => deepExtend(destDict[key], v)) : deepExtend(destDict[key], value);\n    }\n  }\n\n  return destination;\n}\n\nexports.deepExtend = deepExtend;\n\nfunction isDivModeEnabled(mode, divs) {\n  return divs instanceof Array ? !!divs.find(t => t.enable && isInArray(mode, t.mode)) : isInArray(mode, divs.mode);\n}\n\nexports.isDivModeEnabled = isDivModeEnabled;\n\nfunction divModeExecute(mode, divs, callback) {\n  if (divs instanceof Array) {\n    for (const div of divs) {\n      const divMode = div.mode;\n      const divEnabled = div.enable;\n\n      if (divEnabled && isInArray(mode, divMode)) {\n        singleDivModeExecute(div, callback);\n      }\n    }\n  } else {\n    const divMode = divs.mode;\n    const divEnabled = divs.enable;\n\n    if (divEnabled && isInArray(mode, divMode)) {\n      singleDivModeExecute(divs, callback);\n    }\n  }\n}\n\nexports.divModeExecute = divModeExecute;\n\nfunction singleDivModeExecute(div, callback) {\n  const selectors = div.selectors;\n\n  if (selectors instanceof Array) {\n    for (const selector of selectors) {\n      callback(selector, div);\n    }\n  } else {\n    callback(selectors, div);\n  }\n}\n\nexports.singleDivModeExecute = singleDivModeExecute;\n\nfunction divMode(divs, element) {\n  if (!element || !divs) {\n    return;\n  }\n\n  if (divs instanceof Array) {\n    return divs.find(d => checkSelector(element, d.selectors));\n  } else if (checkSelector(element, divs.selectors)) {\n    return divs;\n  }\n}\n\nexports.divMode = divMode;\n\nfunction circleBounceDataFromParticle(p) {\n  return {\n    position: p.getPosition(),\n    radius: p.getRadius(),\n    mass: p.getMass(),\n    velocity: p.velocity,\n    factor: Core_1.Vector.create((0, NumberUtils_1.getValue)(p.options.bounce.horizontal), (0, NumberUtils_1.getValue)(p.options.bounce.vertical))\n  };\n}\n\nexports.circleBounceDataFromParticle = circleBounceDataFromParticle;\n\nfunction circleBounce(p1, p2) {\n  const {\n    x: xVelocityDiff,\n    y: yVelocityDiff\n  } = p1.velocity.sub(p2.velocity);\n  const [pos1, pos2] = [p1.position, p2.position];\n  const {\n    dx: xDist,\n    dy: yDist\n  } = (0, NumberUtils_1.getDistances)(pos2, pos1);\n\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n    const angle = -Math.atan2(yDist, xDist);\n    const m1 = p1.mass;\n    const m2 = p2.mass;\n    const u1 = p1.velocity.rotate(angle);\n    const u2 = p2.velocity.rotate(angle);\n    const v1 = (0, NumberUtils_1.collisionVelocity)(u1, u2, m1, m2);\n    const v2 = (0, NumberUtils_1.collisionVelocity)(u2, u1, m1, m2);\n    const vFinal1 = v1.rotate(-angle);\n    const vFinal2 = v2.rotate(-angle);\n    p1.velocity.x = vFinal1.x * p1.factor.x;\n    p1.velocity.y = vFinal1.y * p1.factor.y;\n    p2.velocity.x = vFinal2.x * p2.factor.x;\n    p2.velocity.y = vFinal2.y * p2.factor.y;\n  }\n}\n\nexports.circleBounce = circleBounce;\n\nfunction rectBounce(particle, divBounds) {\n  const pPos = particle.getPosition();\n  const size = particle.getRadius();\n  const bounds = calculateBounds(pPos, size);\n  const resH = rectSideBounce({\n    min: bounds.left,\n    max: bounds.right\n  }, {\n    min: bounds.top,\n    max: bounds.bottom\n  }, {\n    min: divBounds.left,\n    max: divBounds.right\n  }, {\n    min: divBounds.top,\n    max: divBounds.bottom\n  }, particle.velocity.x, (0, NumberUtils_1.getValue)(particle.options.bounce.horizontal));\n\n  if (resH.bounced) {\n    if (resH.velocity !== undefined) {\n      particle.velocity.x = resH.velocity;\n    }\n\n    if (resH.position !== undefined) {\n      particle.position.x = resH.position;\n    }\n  }\n\n  const resV = rectSideBounce({\n    min: bounds.top,\n    max: bounds.bottom\n  }, {\n    min: bounds.left,\n    max: bounds.right\n  }, {\n    min: divBounds.top,\n    max: divBounds.bottom\n  }, {\n    min: divBounds.left,\n    max: divBounds.right\n  }, particle.velocity.y, (0, NumberUtils_1.getValue)(particle.options.bounce.vertical));\n\n  if (resV.bounced) {\n    if (resV.velocity !== undefined) {\n      particle.velocity.y = resV.velocity;\n    }\n\n    if (resV.position !== undefined) {\n      particle.position.y = resV.position;\n    }\n  }\n}\n\nexports.rectBounce = rectBounce;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nconst Core_1 = require(\"../../../Core\");\n\nconst Utils_1 = require(\"../../../Utils\");\n\nclass Grabber extends Core_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n    return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n  }\n\n  reset() {}\n\n  interact() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n    if (interactivity.events.onHover.enable && container.interactivity.status === Core_1.Constants.mouseMoveEvent) {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const distance = container.retina.grabModeDistance,\n            query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      for (const particle of query) {\n        const pos = particle.getPosition(),\n              pointDistance = (0, Utils_1.getDistance)(pos, mousePos);\n\n        if (pointDistance <= distance) {\n          const grabLineOptions = interactivity.modes.grab.links,\n                lineOpacity = grabLineOptions.opacity,\n                opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n          if (opacityLine <= 0) {\n            continue;\n          }\n\n          const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n          if (!container.particles.grabLineColor) {\n            const linksOptions = options.interactivity.modes.grab.links;\n            container.particles.grabLineColor = (0, Utils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n          }\n\n          const colorLine = (0, Utils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n\n          if (!colorLine) {\n            return;\n          }\n\n          container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n        }\n      }\n    }\n  }\n\n}\n\nexports.Grabber = Grabber;","map":null,"metadata":{},"sourceType":"script"}
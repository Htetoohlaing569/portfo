{"ast":null,"code":"import Promise from 'promise-polyfill';\nimport fetchPonyfill from 'fetch-ponyfill';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n\nfunction btoa(string) {\n  string = String(string);\n  var bitmap,\n      a,\n      b,\n      c,\n      result = '',\n      i = 0,\n      rest = string.length % 3; // To determine the final padding\n\n  for (; i < string.length;) {\n    if ((a = string.charCodeAt(i++)) > 255 || (b = string.charCodeAt(i++)) > 255 || (c = string.charCodeAt(i++)) > 255) throw new TypeError(\"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\");\n    bitmap = a << 16 | b << 8 | c;\n    result += b64.charAt(bitmap >> 18 & 63) + b64.charAt(bitmap >> 12 & 63) + b64.charAt(bitmap >> 6 & 63) + b64.charAt(bitmap & 63);\n  } // If there's need of padding, replace the last 'A's with equal signs\n\n\n  return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;\n}\n\nfunction atob(string) {\n  // atob can work with strings with whitespaces, even inside the encoded part,\n  // but only \\t, \\n, \\f, \\r and ' ', which can be stripped.\n  string = String(string).replace(/[\\t\\n\\f\\r ]+/g, '');\n  if (!b64re.test(string)) throw new TypeError(\"Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.\"); // Adding the padding if missing, for semplicity\n\n  string += '=='.slice(2 - (string.length & 3));\n  var bitmap,\n      result = '',\n      r1,\n      r2,\n      i = 0;\n\n  for (; i < string.length;) {\n    bitmap = b64.indexOf(string.charAt(i++)) << 18 | b64.indexOf(string.charAt(i++)) << 12 | (r1 = b64.indexOf(string.charAt(i++))) << 6 | (r2 = b64.indexOf(string.charAt(i++)));\n    result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255) : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255) : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);\n  }\n\n  return result;\n}\n\nvar version = \"2.6.2\";\n/**\n * Base-64 encodes a (JSON-castable) object.\n *\n * @param obj - The object to encode.\n */\n\nvar encode64 = function encode64(obj) {\n  return btoa(JSON.stringify(obj));\n};\n/**\n * Generates a client header.\n *\n * @param givenLabel\n */\n\n\nvar clientHeader = function clientHeader(givenLabel) {\n  var label = \"@formspree/core@\".concat(version);\n  if (!givenLabel) return label;\n  return \"\".concat(givenLabel, \" \").concat(label);\n};\n/**\n * The current timestamp.\n */\n\n\nvar now = function now() {\n  // @ts-ignore\n  return 1 * new Date();\n};\n\nvar webdriver = function webdriver() {\n  return navigator.webdriver || !!document.documentElement.getAttribute(atob('d2ViZHJpdmVy')) || // @ts-ignore\n  !!window.callPhantom || // @ts-ignore\n  !!window._phantom;\n};\n\nvar Session = /*#__PURE__*/function () {\n  function Session() {\n    _classCallCheck(this, Session);\n\n    this.loadedAt = now();\n    this.webdriver = webdriver();\n  }\n\n  _createClass(Session, [{\n    key: \"teardown\",\n    value: function teardown() {}\n  }, {\n    key: \"data\",\n    value: function data() {\n      return {\n        loadedAt: this.loadedAt,\n        webdriver: this.webdriver\n      };\n    }\n  }]);\n\n  return Session;\n}();\n\nvar Client = /*#__PURE__*/function () {\n  function Client() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    this.project = config.project;\n    if (typeof window !== 'undefined') this.startBrowserSession();\n  }\n  /**\n   * Starts a browser session.\n   */\n\n\n  _createClass(Client, [{\n    key: \"startBrowserSession\",\n    value: function startBrowserSession() {\n      if (!this.session) {\n        this.session = new Session();\n      }\n    }\n    /**\n     * Teardown the client session.\n     */\n\n  }, {\n    key: \"teardown\",\n    value: function teardown() {\n      if (this.session) this.session.teardown();\n    }\n    /**\n     * Submit a form.\n     *\n     * @param formKey - The form key.\n     * @param data - An object or FormData instance containing submission data.\n     * @param args - An object of form submission data.\n     */\n\n  }, {\n    key: \"submitForm\",\n    value: function submitForm(formKey, data) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var endpoint = opts.endpoint || 'https://formspree.io';\n      var fetchImpl = opts.fetchImpl || fetchPonyfill({\n        Promise: Promise\n      }).fetch;\n      var url = this.project ? \"\".concat(endpoint, \"/p/\").concat(this.project, \"/f/\").concat(formKey) : \"\".concat(endpoint, \"/f/\").concat(formKey);\n\n      var serializeBody = function serializeBody(data) {\n        if (data instanceof FormData) return data;\n        return JSON.stringify(data);\n      };\n\n      var headers = {\n        Accept: 'application/json',\n        'Formspree-Client': clientHeader(opts.clientName)\n      };\n\n      if (this.session) {\n        headers['Formspree-Session-Data'] = encode64(this.session.data());\n      }\n\n      if (!(data instanceof FormData)) {\n        headers['Content-Type'] = 'application/json';\n      }\n\n      var request = {\n        method: 'POST',\n        mode: 'cors',\n        body: serializeBody(data),\n        headers: headers\n      };\n      return fetchImpl(url, request).then(function (response) {\n        return response.json().then(function (body) {\n          return {\n            body: body,\n            response: response\n          };\n        });\n      });\n    }\n  }]);\n\n  return Client;\n}();\n/**\n * Constructs the client object.\n */\n\n\nvar createClient = function createClient(config) {\n  return new Client(config);\n};\n/**\n * Fetches the global default client.\n */\n\n\nvar getDefaultClient = function getDefaultClient() {\n  if (!defaultClientSingleton) {\n    defaultClientSingleton = createClient();\n  }\n\n  return defaultClientSingleton;\n};\n/**\n * The global default client. Note, this client may not get torn down.\n */\n\n\nvar defaultClientSingleton;\nexport { Client, createClient, getDefaultClient };","map":null,"metadata":{},"sourceType":"module"}
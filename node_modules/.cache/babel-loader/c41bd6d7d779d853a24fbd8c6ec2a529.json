{"ast":null,"code":"import React, { useState, useEffect, useContext } from 'react';\nimport { createClient, getDefaultClient } from '@formspree/core';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar FormspreeContext = React.createContext({\n  client: undefined\n});\nFormspreeContext.displayName = 'Formspree';\n\nvar FormspreeProvider = function FormspreeProvider(props) {\n  if (!props.project) {\n    throw new Error('project is required');\n  }\n\n  var _useState = useState(function () {\n    return createClient({\n      project: props.project\n    });\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      client = _useState2[0];\n\n  useEffect(function () {\n    client.startBrowserSession();\n    return function () {\n      client.teardown();\n    };\n  }, []);\n  return React.createElement(FormspreeContext.Provider, {\n    value: {\n      client: client\n    }\n  }, props.children);\n};\n\nfunction useFormspree() {\n  var _useContext = useContext(FormspreeContext),\n      client = _useContext.client;\n\n  return client || getDefaultClient();\n}\n\nvar version = \"2.2.4\";\n\nfunction isEvent(data) {\n  return data.preventDefault !== undefined;\n}\n\nfunction useForm(formKey) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      submitting = _useState2[0],\n      setSubmitting = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      succeeded = _useState4[0],\n      setSucceeded = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errors = _useState6[0],\n      setErrors = _useState6[1];\n\n  var globalClient = useFormspree();\n  var client = args.client || globalClient;\n\n  if (!client) {\n    throw new Error('You must provide a Formspree client');\n  }\n\n  if (!formKey) {\n    throw new Error('You must provide a form key or hashid ' + '(e.g. useForm(\"myForm\") or useForm(\"123xyz\")');\n  }\n\n  var debug = !!args.debug;\n  var extraData = args.data;\n\n  var reset = function reset() {\n    setSubmitting(false);\n    setSucceeded(false);\n    setErrors([]);\n  };\n\n  var handleSubmit = function handleSubmit(submissionData) {\n    var getFormData = function getFormData(event) {\n      event.preventDefault();\n      var form = event.target;\n\n      if (form.tagName != 'FORM') {\n        throw new Error('submit was triggered for a non-form element');\n      }\n\n      return new FormData(form);\n    };\n\n    var formData = isEvent(submissionData) ? getFormData(submissionData) : submissionData;\n\n    var appendExtraData = function appendExtraData(prop, value) {\n      if (formData instanceof FormData) {\n        formData.append(prop, value);\n      } else {\n        formData = Object.assign(formData, _defineProperty({}, prop, value));\n      }\n    }; // Append extra data from config\n\n\n    if (_typeof(extraData) === 'object') {\n      for (var prop in extraData) {\n        if (typeof extraData[prop] === 'function') {\n          appendExtraData(prop, extraData[prop].call(null));\n        } else {\n          appendExtraData(prop, extraData[prop]);\n        }\n      }\n    }\n\n    setSubmitting(true);\n    return client.submitForm(formKey, formData, {\n      endpoint: args.endpoint,\n      clientName: \"@formspree/react@\".concat(version)\n    }).then(function (result) {\n      var status = result.response.status;\n      var body;\n\n      if (status === 200) {\n        if (debug) console.log('Form submitted', result);\n        setSucceeded(true);\n        setErrors([]);\n      } else if (status >= 400 && status < 500) {\n        body = result.body;\n        if (body.errors) setErrors(body.errors);\n        if (debug) console.log('Validation error', result);\n        setSucceeded(false);\n      } else {\n        if (debug) console.log('Unexpected error', result);\n        setSucceeded(false);\n      }\n\n      return result;\n    })[\"catch\"](function (error) {\n      if (debug) console.log('Unexpected error', error);\n      setSucceeded(false);\n      throw error;\n    })[\"finally\"](function () {\n      setSubmitting(false);\n    });\n  };\n\n  return [{\n    submitting: submitting,\n    succeeded: succeeded,\n    errors: errors\n  }, handleSubmit, reset];\n}\n\nvar ValidationError = function ValidationError(props) {\n  var prefix = props.prefix,\n      field = props.field,\n      errors = props.errors,\n      attrs = _objectWithoutProperties(props, [\"prefix\", \"field\", \"errors\"]);\n\n  var error = (errors || []).find(function (error) {\n    return error.field == field;\n  });\n\n  if (!error) {\n    return null;\n  }\n\n  return React.createElement(\"div\", attrs, prefix, \" \", error.message);\n};\n\nexport { FormspreeProvider, ValidationError, useForm, useFormspree };","map":null,"metadata":{},"sourceType":"module"}
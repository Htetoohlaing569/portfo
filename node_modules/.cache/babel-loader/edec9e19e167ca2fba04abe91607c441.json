{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Repulser = void 0;\n\nconst Core_1 = require(\"../../../Core\");\n\nconst Utils_1 = require(\"../../../Utils\");\n\nclass Repulser extends Core_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divRepulse = (0, Utils_1.isDivModeEnabled)(\"repulse\", divs);\n\n    if (!(divRepulse || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return (0, Utils_1.isInArray)(\"repulse\", hoverMode) || (0, Utils_1.isInArray)(\"repulse\", clickMode) || divRepulse;\n  }\n\n  reset() {}\n\n  interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === Core_1.Constants.mouseMoveEvent,\n          events = options.interactivity.events,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          clickEnabled = events.onClick.enable,\n          clickMode = events.onClick.mode,\n          divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && (0, Utils_1.isInArray)(\"repulse\", hoverMode)) {\n      this.hoverRepulse();\n    } else if (clickEnabled && (0, Utils_1.isInArray)(\"repulse\", clickMode)) {\n      this.clickRepulse();\n    } else {\n      (0, Utils_1.divModeExecute)(\"repulse\", divs, (selector, div) => this.singleSelectorRepulse(selector, div));\n    }\n  }\n\n  singleSelectorRepulse(selector, div) {\n    const container = this.container,\n          query = document.querySelectorAll(selector);\n\n    if (!query.length) {\n      return;\n    }\n\n    query.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Core_1.Circle(pos.x, pos.y, repulseRadius) : new Core_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            divs = container.actualOptions.interactivity.modes.repulse.divs,\n            divRepulse = (0, Utils_1.divMode)(divs, elem);\n      this.processRepulse(pos, repulseRadius, area, divRepulse);\n    });\n  }\n\n  hoverRepulse() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const repulseRadius = container.retina.repulseModeDistance;\n    this.processRepulse(mousePos, repulseRadius, new Core_1.Circle(mousePos.x, mousePos.y, repulseRadius));\n  }\n\n  processRepulse(position, repulseRadius, area, divRepulse) {\n    var _a;\n\n    const container = this.container,\n          query = container.particles.quadTree.query(area),\n          repulseOptions = container.actualOptions.interactivity.modes.repulse;\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = (0, Utils_1.getDistances)(particle.position, position),\n            velocity = ((_a = divRepulse === null || divRepulse === void 0 ? void 0 : divRepulse.speed) !== null && _a !== void 0 ? _a : repulseOptions.speed) * repulseOptions.factor,\n            repulseFactor = (0, Utils_1.clamp)((0, Utils_1.calcEasing)(1 - distance / repulseRadius, repulseOptions.easing) * velocity, 0, repulseOptions.maxSpeed),\n            normVec = Core_1.Vector.create(distance === 0 ? velocity : dx / distance * repulseFactor, distance === 0 ? velocity : dy / distance * repulseFactor);\n      particle.position.addTo(normVec);\n    }\n  }\n\n  clickRepulse() {\n    const container = this.container;\n\n    if (!container.repulse.finish) {\n      if (!container.repulse.count) {\n        container.repulse.count = 0;\n      }\n\n      container.repulse.count++;\n\n      if (container.repulse.count === container.particles.count) {\n        container.repulse.finish = true;\n      }\n    }\n\n    if (container.repulse.clicking) {\n      const repulseDistance = container.retina.repulseModeDistance,\n            repulseRadius = Math.pow(repulseDistance / 6, 3),\n            mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (mouseClickPos === undefined) {\n        return;\n      }\n\n      const range = new Core_1.Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius),\n            query = container.particles.quadTree.query(range);\n\n      for (const particle of query) {\n        const {\n          dx,\n          dy,\n          distance\n        } = (0, Utils_1.getDistances)(mouseClickPos, particle.position),\n              d = distance ** 2,\n              velocity = container.actualOptions.interactivity.modes.repulse.speed,\n              force = -repulseRadius * velocity / d;\n\n        if (d <= repulseRadius) {\n          container.repulse.particles.push(particle);\n          const vect = Core_1.Vector.create(dx, dy);\n          vect.length = force;\n          particle.velocity.setTo(vect);\n        }\n      }\n    } else if (container.repulse.clicking === false) {\n      for (const particle of container.repulse.particles) {\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.repulse.particles = [];\n    }\n  }\n\n}\n\nexports.Repulser = Repulser;","map":null,"metadata":{},"sourceType":"script"}